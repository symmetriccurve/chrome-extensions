{"version":3,"sources":["_Extension.css.js","_vars.css.js","Extension.js","index.js"],"names":["styles","App","state","pnrs","getLocalPNRS","a","that","chrome","storage","local","get","pnrsObj","console","log","setState","grabPNR","runtime","sendMessage","message","response","pnr","newPnrs","this","saveToChromeStorage","bind","firstName","Math","random","lastName","applyPNR","index","key","value","set","deletePnr","forEach","eachPnr","push","id","className","style","marginBottom","onClick","map","slice","toUpperCase","React","Component","injectWrapper","document","body","app","createElement","prepend","ReactDOM","render","Extension","getElementById"],"mappings":"wVAEaA,EAAM,muCCFC,aDED,4nBCAP,UDAO,8d,IEsPJC,E,2MA/KXC,MAAQ,CACJC,KAJG,I,EAsBPC,a,sBAAe,4BAAAC,EAAA,sDACLC,EADK,eAEPC,QAAUA,OAAOC,SACjBD,OAAOC,QAAQC,MAAMC,IAAI,QAAQ,SAAUC,GACvCC,QAAQC,IAAI,0BAA2BF,EAAQR,MAC/CG,EAAKQ,SAAS,CACVX,KAAMQ,EAAQR,UANf,2C,EAYfY,Q,sBAAU,gCAAAV,EAAA,sDACFE,QAAUA,OAAOC,QACjBD,OAAOS,QAAQC,YAAY,CAAEC,QAAS,WAAa,SAAUC,GACzD,GAAGA,EAASD,SAAWC,EAASD,QAAQE,IAAI,CACxC,IAAMC,EAAO,CAAIF,EAASD,SAAb,mBAAwBI,KAAKpB,MAAMC,OAChDmB,KAAKC,oBAAoB,OAAOF,GAChCC,KAAKR,SAAS,CACVX,KAAMkB,MAGhBG,KARiD,kBAU/CC,EAAY,aAAeC,KAAKC,SAChCC,EAAW,YAAcF,KAAKC,SAC9BP,EAAM,MAAQM,KAAKC,SACvB,EAAKb,SAAS,CACVX,KAAK,CAAE,CAAEsB,YAAWG,WAAUR,QAA1B,mBAAmC,EAAKlB,MAAMC,UAhBpD,2C,EAoCV0B,S,uCAAW,WAAOC,GAAP,SAAAzB,EAAA,sDACPO,QAAQC,IAAI,eAAgB,EAAKX,MAAMC,KAAK2B,IAC5CvB,OAAOS,QAAQC,YAAY,CAAEC,QAAS,YAAaE,IAAK,EAAKlB,MAAMC,KAAK2B,IAAU,SAAUX,KAU1FK,KAVgF,iBAF3E,2C,wDAeXD,oB,uCAAsB,WAAMQ,EAAIC,GAAV,SAAA3B,EAAA,sDACfE,QAAUA,OAAOC,SAChBD,OAAOC,QAAQC,MAAMwB,IAArB,eAA4BF,EAAMC,IAAS,WACvCpB,QAAQC,IAAI,8BAHF,2C,0DAQtBqB,U,uCAAY,WAAOd,GAAP,iBAAAf,EAAA,sDACFF,EAAO,EAAKD,MAAMC,KACpBkB,EAAU,GACdlB,EAAKgC,SAAQ,SAAAC,GACNA,EAAQhB,MAAOA,GACdC,EAAQgB,KAAKD,MAGrB,EAAKb,oBAAoB,OAAOF,GAChC,EAAKP,SAAS,CACVX,KAAMkB,IAVF,2C,yIA1ERC,KAAKlB,iB,+BAwFC,IAAD,OACL,OACI,oCACI,+BAAQJ,GACR,yBAAKsC,GAAG,iBACJ,yBAAKC,UAAU,aAIX,yBAAKC,MAAO,CAAEC,aAAc,SAAW,0BAAMF,UAAU,WAAWG,QAAS,kBAAM,EAAK3B,YAA/C,cAEnCO,KAAKpB,MAAMC,KAAKwC,KAAI,SAACP,EAASN,GAAW,IAAD,EACSM,EAAtCX,iBAD6B,MACnB,GADmB,IACSW,EAAxBR,gBADe,MACN,GADM,IACSQ,EAAXhB,WADE,MACE,GADF,EAEpC,OACI,yBAAKmB,UAAU,SACX,0BAAMA,UAAU,QAAQG,QAAS,kBAAM,EAAKb,SAASC,KAEjD,0BAAMS,UAAU,QAAQd,EAAUmB,MAAM,EAAE,KAC1C,0BAAML,UAAU,QAAQX,EAASgB,MAAM,EAAE,KACzC,0BAAML,UAAU,YAAYnB,EAAIyB,cAAcD,MAAM,EAAE,MAE1D,0BAAML,UAAU,aAAaG,QAAS,kBAAM,EAAKR,UAAUd,KAA3D,gB,GA9HtB0B,IAAMC,WCnElBC,G,MAAgBC,SAASC,MACzBC,EAAMF,SAASG,cAAc,OACnCD,EAAIb,GAAK,wBACLU,GAAeA,EAAcK,QAAQF,GAKzCG,IAASC,OAAO,kBAAC,IAAD,KAAiB,kBAACC,EAAD,OAAiCP,SAASQ,eAAe,4B","file":"static/js/main.a4ed3fc2.chunk.js","sourcesContent":["import { font, colors } from './_vars.css';\n\nexport const styles = `\n    *, *:before, *:after {\n        box-sizing: border-box;\n    }\n    .container{\n        overflow-y: scroll;\n        overflow-x: scroll;\n        height: 200px;\n        padding: 20px;\n    }\n    .cell {\n        color: #e5e6e6;\n        padding: 7px;\n        font-size: 17px;\n        border: 1px solid #e5e6e6;\n        min-width: 120px;\n        min-width: 120px;\n    }\n\n    .cell:hover {\n        background: #e7e6e6;\n        color: #303846;\n        cursor: pointer;\n    }\n\n    .apply{\n        color: #e5e6e6;\n        padding: 7px;\n        font-size: 17px;\n        border: 1px solid #e5e6e6;\n        min-width: 10px;\n    }\n    .delete{\n        color: #e5e6e6;\n        padding: 7px;\n        font-size: 17px;\n        border: 1px solid #e5e6e6;\n        min-width: 10px;\n        max-width: 150px;\n    }\n    .pnr {\n        font-weight: bold;\n    }\n    .table{\n        display: flex;\n        align-items: center;\n    }\n    .btn{\n\n    }\n    .btn:hover{\n        cursor: pointer;\n        background: #e7e6e6;\n        color: #303846;\n    }\n    #ext--dialogue {\n        position: fixed;\n        right: 0;\n        top: 0;\n        background: #303846;\n        color: $black; \n        font-family: ${font};\n        font-size: 14px;\n        text-align: center;\n        width: 50vh;\n        min-height: 25vh;\n        max-height: 100vh;\n        cursor: auto;\n        user-select: none;  \n        box-shadow: -8px 8px 16px 3px rgba(0,0,0,0.15);\n        transition: all 260ms ease-in-out;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        animation: fadeIn;\n        animation-duration: 260ms;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n        animation-iteration-count: 1;\n    }\n    h1, h2, h3, h4, h5, h6, p {\n        color:  ${colors.black};\n        font-size: 16px;\n        font-weight: normal;\n    }\n    button {\n        border: none;\n        line-height: 34px;\n        background: white;\n        padding: 0 17px;\n        border-radius: 4px;\n        color: #303846;\n        outline: none;\n    }\n    @keyframes fadeIn {\n        from {\n            transform: scale(0.5);\n            opacity: 0;\n        }\n        to {\n            transform: scale(1);\n            opacity: 1;\n        }\n    }\n`;","export const font = 'sans-serif';\nexport const colors = { \n    black : '#2b2929', \n    red : 'crimson',\n    white : '#fff',\n    blue : '#0090ff'\n    };","/* global chrome */\nimport React, { useState } from 'react';\n// you don't have to do your CSS like this, but one of the benefits of Shadow Dom\n// is encapsulating your styles from the target webpage (prevent collusion, etc)\nimport { styles } from './_Extension.css';\n\nfunction getInitialState(){\n    if(process.env.NODE_ENV === \"development\"){\n        return [{\n            firstName: \"Vijaya\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOA\"\n        },\n        {\n            firstName: \"Tesla\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOB\"\n        },\n        {\n            firstName: \"bad\",\n            lastName: \"Guy\",\n            pnr: \"VXBZOC\"\n        },\n        {\n            firstName: \"Vijaya\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOD\"\n        },\n        {\n            firstName: \"Tesla\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOE\"\n        },\n        {\n            firstName: \"bad\",\n            lastName: \"Guy\",\n            pnr: \"VXBZOF\"\n        },\n        {\n            firstName: \"Vijaya\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOX\"\n        },\n        {\n            firstName: \"Tesla\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOG\"\n        },\n        {\n            firstName: \"bad\",\n            lastName: \"Guy\",\n            pnr: \"VXBZOH\"\n        },\n        {\n            firstName: \"Vijaya\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOI\"\n        },\n        {\n            firstName: \"Tesla\",\n            lastName: \"Awesome\",\n            pnr: \"VXBZOJ\"\n        },\n        {\n            firstName: \"bad\",\n            lastName: \"Guy\",\n            pnr: \"VXBZOK\"\n        }]\n    }\n\n    return []\n}\nclass App extends React.Component {\n    state = {\n        pnrs: getInitialState()\n    }\n\n    // handleMessage = async () => {\n    //     // everything is \"in view\"  \n    //     chrome.runtime.sendMessage({message: \"click\"}, function(response) {\n    //         console.log('response: ', response);\n    //         this.setState({\n    //             pnrs: [...this.state.pnr,response.message]\n    //         })\n    //         // setMessage(response.message)\n    //     });\n    // }\n\n    componentDidMount() {\n        this.getLocalPNRS()\n    }\n\n    getLocalPNRS = async () => {\n        const that = this\n        if (chrome && chrome.storage) {\n            chrome.storage.local.get(\"pnrs\", function (pnrsObj) {\n                console.log('Retrived successfully: ', pnrsObj.pnrs);\n                that.setState({\n                    pnrs: pnrsObj.pnrs\n                })\n            })\n        }\n    }\n\n    grabPNR = async () => {\n        if (chrome && chrome.storage) {\n            chrome.runtime.sendMessage({ message: \"GET_PNR\" }, function (response) {\n                if(response.message && response.message.pnr){\n                    const newPnrs = [response.message,...this.state.pnrs]\n                    this.saveToChromeStorage('pnrs',newPnrs)\n                    this.setState({\n                        pnrs: newPnrs\n                    })\n                }\n            }.bind(this));\n        } else {\n            var firstName = \"First Name\" + Math.random()\n            var lastName = \"Last Name\" + Math.random()\n            var pnr = \"PNR\" + Math.random()\n            this.setState({\n                pnrs: [{ firstName, lastName, pnr },...this.state.pnrs]\n            })\n        }\n    }\n\n    // applyPNR = async (id) => {\n    //     // everything is \"in view\"  \n    //     chrome.runtime.sendMessage({message: \"GET_PNR\"}, function(response) {\n    //         console.log('response: ', response);\n    //         this.setState({\n    //             pnrs: [...this.state.pnrs,response.message]\n    //         },()=>{\n    //             chrome.storage.local.set({\"pnrs\": this.state.pnrs}, function(){\n    //                console.log(\"Saved Data Successfully\")\n    //             });\n    //             localStorage.setItem(\"Settingthe PNR here\",JSON.stringify(this.state.pnrs))\n    //         })\n    //     }.bind(this));\n    // }\n\n    applyPNR = async (index) => {\n        console.log('Applying PNR', this.state.pnrs[index]);\n        chrome.runtime.sendMessage({ message: \"APPLY_PNR\", pnr: this.state.pnrs[index] }, function (response) {\n            // console.log('response: ', response);\n            // this.setState({\n            //     pnrs: [...this.state.pnrs,response.message]\n            // },()=>{\n            //     chrome.storage.local.set({\"pnrs\": this.state.pnrs}, function(){\n            //        console.log(\"Saved Data Successfully\")\n            //     });\n            //     localStorage.setItem(\"Settingthe PNR here\",JSON.stringify(this.state.pnrs))\n            // })\n        }.bind(this));\n    }\n\n    saveToChromeStorage = async(key,value) => {\n        if(chrome && chrome.storage){\n            chrome.storage.local.set({ [key]: value }, function () {\n                console.log(\"Saved Data Successfully\")\n            });\n        }\n    }\n\n    deletePnr = async (pnr) => {\n        const pnrs = this.state.pnrs\n        let newPnrs = []\n        pnrs.forEach(eachPnr=>{\n            if(eachPnr.pnr !==pnr){\n                newPnrs.push(eachPnr)\n            }\n        })\n        this.saveToChromeStorage('pnrs',newPnrs)\n        this.setState({\n            pnrs: newPnrs\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <style>{styles}</style>\n                <div id=\"ext--dialogue\">\n                    <div className=\"container\">\n                        {/* <h1>Extension Shell</h1> */}\n                        {/* { message && <p>Random { message }</p>} */}\n                        {/* <button onClick={handleMessage}>Change BackGround Color</button> */}\n                        <div style={{ marginBottom: '20px' }} ><span className='cell btn' onClick={() => this.grabPNR()}>Scrap PNR</span></div>\n                        {\n                            this.state.pnrs.map((eachPnr, index) => {\n                                const {firstName=\"\", lastName=\"\", pnr=\"\" } = eachPnr\n                                return (\n                                    <div className='table'>\n                                        <span className='table' onClick={() => this.applyPNR(index)}>\n                                            {/* <span className='btn apply' onClick={() => this.applyPNR(index)}>Apply ▶</span> */}\n                                            <span className='cell'>{firstName.slice(0,10)}</span>\n                                            <span className='cell'>{lastName.slice(0,10)}</span>\n                                            <span className='cell pnr'>{pnr.toUpperCase().slice(0,10)}</span>\n                                        </span>\n                                        <span className='btn delete' onClick={() => this.deletePnr(pnr)}>X</span>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n}\n\n// function App() {\n//     const [ message, setMessage ] = useState(false);\n\n//     let handleMessage = async () => {\n//         // everything is \"in view\"  \n//         chrome.runtime.sendMessage({message: \"click\"}, function(response) {\n//             console.log('response: ', response);\n//             setMessage(response.message)\n//         });\n//     }\n\n//     let grabPNR = async () => {\n//         // everything is \"in view\"  \n//         chrome.runtime.sendMessage({message: \"GET_PNR\"}, function(response) {\n//             console.log('GOT PNR: ', response);\n//             // setMessage(response.message)\n//         });\n//     }\n\n\n\n\n//     return (\n//         <>\n//             <style>{styles}</style>\n//             <div id=\"ext--dialogue\">\n//                 <div>\n//                     <h1>Extension Shell</h1>\n//                     { message && <p>Random { message }</p>}\n//                     <button onClick={handleMessage}>Change BackGround Color</button>\n//                     <button onClick={grabPNR}>GET PNR</button>\n//                 </div>\n//             </div>  \n//         </>\n//     )\n// }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactShadowRoot from 'react-shadow-root';\nimport Extension from './Extension';\nimport './global.scss';\nconst injectWrapper = document.body;\nconst app = document.createElement('div');\napp.id = 'jk--chrome--extension';\nif (injectWrapper) injectWrapper.prepend(app);\n\n// without #shadow-dom\n// ReactDOM.render(<Extension />, document.getElementById('jk--chrome--extension'));\n// with #shadow-dom\nReactDOM.render(<ReactShadowRoot><Extension /></ReactShadowRoot>, document.getElementById('jk--chrome--extension'));"],"sourceRoot":""}